from statsmodels.tsa.stattools import adfuller, kpss
import pmdarima as pmd


def adfuller_test(ts, p=0.05, maxlag=None, regression="c"):
    # Run test
    result = adfuller(ts, maxlag=maxlag, regression=regression)
    labels = [
        "ADF test statistics",
        "P-value",
        "# Lags used",
        "# Observations used",
    ]
    print(f"Running ADF test with p-threshold {p}\n")
    for value, label in zip(result, labels):
        print(f"{label}: {str(value)}")
    print()
    if result[1] <= p:
        print("Reject the ADF null hypothesis. Time series is STATIONARY.")
    else:
        print("Cannot reject the ADF null hypothesis. Time series is NON-STATIONARY. ")

def ocsb_test(ts, m):
    print(f"Running OCSB test with seasonal period {m}\n")
    # The test requires that we specify the seasonal period m
    n_diff_ocsb = pmd.arima.OCSBTest(m=m).estimate_seasonal_differencing_term(ts)

    # If the test recommends seasonal differencing, the TS is non-stationary
    if n_diff_ocsb > 0:
        print("Time series is NON-STATIONARY and requires seasonal differencing.")
    else:
        print("Time series is seasonally STATIONARY.")
    print(f"Recommended order of seasonal differencing: {n_diff_ocsb}")
    
def kpss_test(ts, p=0.05, nlags="auto"):
    # Run test
    result = kpss(ts, nlags=nlags)
    labels = ["KPSS test statistics", "P-value", "# Lags used"]
    print(f"Running KPSS test with p-threshold {p}\n")
    for value, label in zip(result, labels):
        print(f"{label}: {str(value)}")
    print()
    if result[1] <= p:
        print("Reject the KPSS null hypothesis. Time series is NON-STATIONARY. ")
    else:
        print("Cannot reject the KPSS null hypothesis. Time series is STATIONARY.")
        
        
  def test_stationarity(timeseries):
    # Determine rolling statistics
    movingAverage = timeseries.rolling(window=12).mean()
    movingSTD = timeseries.rolling(window=12).std()

    # Plot rolling statistics
    orig = plt.plot(timeseries, color="blue", label="Original")
    mean = plt.plot(movingAverage, color="red", label="Rolling Mean")
    std = plt.plot(movingSTD, color="black", label="Rolling Std")
    plt.legend(loc="best")
    plt.title("Rolling Mean & Standard Deviation")
    plt.show(block=False)

    # Perform Dickeyâ€“Fuller test:
    print("Results of Dickey Fuller Test:")
    dftest = adfuller(timeseries, autolag="AIC")
    dfoutput = pd.Series(
        dftest[0:4],
        index=[
            "Test Statistic",
            "p-value",
            "#Lags Used",
            "Number of Observations Used",
        ],
    )
    for key, value in dftest[4].items():
        dfoutput["Critical Value (%s)" % key] = value
    print(dfoutput)

    adfuller_test(timeseries)
